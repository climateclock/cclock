#!/bin/bash -e

# NOTE: Only one specific v0 should ever make it out into the real world.
# All subsequent versions are modifications on top of v0, so v0 must be
# stable or it will change the interpretation of all other versions.
#
# TODO: This deployment script should deploy only a git-tagged v0 in
# /Volumes/CIRCUITPY, then deploy the current version exactly as it would
# be installed by the software update mechanism.

cd $(dirname "$0")
cd ..

debug_fragmentation=no
if [ "$1" = '-d' ]; then
  debug_fragmentation=yes
  shift
fi
module="$1"
module=${module%.py}
target=/Volumes/CIRCUITPY
unalias -a

echo 'Checking syntax...'
python3 <<EOF || exit 1
import os
from app import run
for name in os.listdir():
    if name.endswith('.py'):
        compile(open(name).read(), name, 'exec')
EOF

if [ ! -d "$target" ]; then
    echo "No drive found at $target.  Is a CircuitPython device connected?"
    exit 1
fi

if ! touch "$target/test"; then
    echo "$target appears to be in read-only mode."
    exit 1
fi

echo
echo "This will wipe the attached MatrixPortal device and perform a factory"
echo "reset, with the current Climate Clock codebase deployed as v0."
echo
echo -n "Proceed? "
read confirm
echo

if ! [[ $confirm = y* ]]; then
    exit 1
fi

echo 'Wiping the flash disk...'
rm -rf $target/*

echo 'Installing program modules...'
rm -f *.mpy
for file in *.py; do
  if [ $file = boot.py ] || [ $file = main.py ]; then
    cp $file $target
  else
    name=${file%.py}
    env/bin/mpy-cross "$name.py"
    cp "$name.mpy" $target/
  fi
done

rm -f *.mpy /tmp/imports.py /tmp/start.py /tmp/start.mpy

echo 'Scanning for imports...'

cat <<EOF >> /tmp/imports.py
import time
time.sleep(2)
import gc
before = after = 0
gc.collect()
print(f'pre-imports,{gc.mem_free()}')
EOF
if [ $debug_fragmentation = 'yes' ]; then
  echo 'import micropython' >> /tmp/imports.py
  echo 'micropython.mem_info(1); print()' >> /tmp/imports.py
fi
for module in $(tools/sort_imports start); do
  cat <<EOF >> /tmp/imports.py
gc.collect(); before = gc.mem_free()
import $module
after = gc.mem_free(); print(f'$module,{before - after}')
EOF
  if [ $debug_fragmentation = 'yes' ]; then
    echo 'micropython.mem_info(1); print()' >> /tmp/imports.py
  fi
done
cat <<EOF >> /tmp/imports.py
gc.collect()
print(f'post-imports,{gc.mem_free()}')
EOF
if [ $debug_fragmentation = 'yes' ]; then
  echo 'micropython.mem_info(1); print()' >> /tmp/imports.py
fi

cat /tmp/imports.py start.py > /tmp/start.py
env/bin/mpy-cross /tmp/start.py
cp /tmp/start.mpy $target/

rm -f *.mpy /tmp/imports.py /tmp/start.py /tmp/start.mpy

echo 'Installing fonts...'
cp *.pcf $target/

echo 'Installing initial copy of clock.json...'
mkdir $target/cache
curl -s -o $target/cache/clock.json https://api.climateclock.world/v1/clock

mkdir $target/v0
touch $target/v0/@VALID
touch $target/v0/@ENABLED
sync
echo 'All done!'
