#!/bin/bash -e

# NOTE: Never move version tags (v0, v1, etc.) in the git repository.
# Once a version has been released, it must never change.
#
# All releases after v5 are shipped as modifications on top of v5, so v5 must
# be stable or it will change (and likely break) all other versions.  In the
# future we may ship releases as modifications on top of versions beyond v5.

cd $(dirname "$0")
source functions.sh
cd ..

if [[ -d /Volumes ]]; then
    drive=/Volumes/CIRCUITPY
elif [[ -d /run/media/$USER ]]; then
    drive=/run/media/$USER/CIRCUITPY
else
    drive=/media/$USER/CIRCUITPY
fi
drive=${CCLOCK_TARGET_ROOT:-$drive}
sim_root=${CCLOCK_SIMULATOR_ROOT:-/tmp/cclock}
base=v5

while [[ $1 = -* ]]; do
    [[ $1 = -d ]] && export CCLOCK_MEMORY_DEBUGGING=1
    [[ $1 = -f ]] && factory=yes
    [[ $1 = -h || $1 = --help ]] && help=yes
    [[ $1 = -p ]] && shift && prefs="$1"
    [[ $1 = -s ]] && drive="$sim_root" && export CCLOCK_SIMULATOR_MODE=1
    [[ $1 = -S ]] && shift && drive="$1" && export CCLOCK_SIMULATOR_MODE=1
    [[ $1 = -w ]] && shift && wifi="$1"
    shift || break
done
vname="$1"

if [[ $help || (! $vname && ! $factory)]]; then
    cat <<EOF && exit 1
Usage: $0 [-d] [-f] [-s] [-S <dir>] [-p <prefs.json>] [-w <network>:<password>] <version>

Deploys the code at the specified version to the attached CircuitPython device
at $drive.  (To change the target, set \$CCLOCK_TARGET_ROOT.)

<version> should be a version name in the form v1, v2, etc.  The code at that
tag will be deployed to a directory named <version>.<hash> on the target device.

-d enables memory debugging: memory layout is dumped with every log message.

-f factory-resets the device by wiping the target drive, deploying $base,
installing clock.json (fetching an up-to-date copy from the API if possible),
and deploying <version> in addition to $base.  When -f is specified, you can
omit <version> to deploy the contents of the current directory as v999.

-p installs the specified prefs.json file; with -f it is installed as factory
prefs (/prefs.json), otherwise as user prefs (data/prefs.json).

-s deploys to a simulated filesystem at $sim_root instead of a real device.

-S deploys to a simulated filesystem at the specified directory.

-w installs a user prefs file (data/prefs.json) with the given Wi-Fi settings.

EOF
fi

if [[ ! $factory ]] && [[ $vname && $vname != v* ]]; then
    echo 'Please specify the version to deploy in the form "v1", "v2", etc.'
    exit 1
fi

if ! git rev-parse $vname 1>/dev/null 2>/dev/null; then
    echo "There is no version tag named $vname."
    exit 1
fi

echo 'Checking syntax...'
python3 <<EOF || exit 1
import os
import sys
sys.path.append('simulator')
from app import run
for name in os.listdir():
    if name.endswith('.py'):
        compile(open(name).read(), name, 'exec')
EOF

[[ $CCLOCK_SIMULATOR_MODE ]] && mkdir -p "$drive"

if [[ ! -d $drive ]] || ! touch "$drive/test" 2>/dev/null; then
    echo -n "Waiting for $drive to be writable.."
    while [[ ! -d $drive ]] || ! touch "$drive/test" 2>/dev/null; do
        echo -n '.'
        sleep 0.3
    done
    sleep 0.5  # wait for drive to become writable after boot
    rm -f "$drive/test"
    echo
fi

if [[ $factory ]]; then
    echo "Wiping $drive and installing bootstrap code..."
    rm -rf $drive/*
    cp boot.py main.py "$drive"
    mkdir -p "$drive"/data
    if [[ $prefs ]]; then
        echo "Installing factory copy of prefs.json..."
        cp "$prefs" "$drive"/prefs.json
    fi
else
    if [[ $prefs ]]; then
        echo "Installing user copy of prefs.json..."
        cp "$prefs" "$drive"/data/prefs.json
    fi
fi

if [[ $wifi ]]; then
    wifi_ssid=$(echo "$wifi" | sed -e 's/:.*//')
    wifi_password=$(echo "$wifi" | sed -E -e 's/[^:]*:?//')
    echo -n 'Setting Wi-Fi network to "'$wifi_ssid'" and '
    echo 'password to "'$wifi_password'" in user prefs...'
    cat <<EOF >"$drive"/data/prefs.json
{"wifi_ssid": "$wifi_ssid", "wifi_password": "$wifi_password"}
EOF
fi

function install_version() {
    version="$1"
    pack_dir="$2"

    # Use tools/pack to find the pack hash, which goes in the directory name.
    eval $(tools/pack -n $version $pack_dir)
    target=$drive/$version.$pack_hash

    echo "Installing $version at $target..."
    mkdir -p "$target"
    cp "$pack_dir"/* "$target"
    echo -n 1 > "$target"/@VALID
    echo -n 1 > "$target"/@ENABLED
}

if [[ $factory ]]; then
    echo "Building $base..."
    base_files_dir=/tmp/base-files.$$
    base_pack_dir=/tmp/base-pack.$$
    mkdir $base_files_dir
    git archive $base | tar -x -C $base_files_dir
    build $base_files_dir $base_pack_dir
    install_version $base $base_pack_dir
    [[ $CCLOCK_KEEP_TEMP_FILES ]] || rm -rf $base_files_dir $base_pack_dir
fi

if [[ $factory ]] && [[ $vname = '' || $vname = . ]]; then
    echo "Building working directory..."
    pack_dir=/tmp/pack.$$
    build . $pack_dir
    install_version v999 $pack_dir
    [[ $CCLOCK_KEEP_TEMP_FILES ]] || rm -rf $pack_dir

elif [[ $vname = v* ]]; then
    echo "Building $vname..."
    vn_files_dir=/tmp/$vname-files.$$
    vn_pack_dir=/tmp/$vname-pack.$$
    mkdir $vn_files_dir
    git archive $vname | tar -x -C $vn_files_dir
    build $vn_files_dir $vn_pack_dir
    install_version $vname $vn_pack_dir
    [[ $CCLOCK_KEEP_TEMP_FILES ]] || rm -rf $vn_files_dir $vn_pack_dir
fi

if [[ $factory ]]; then
    echo 'Installing factory copy of clock.json...'
    # Try to fetch it from the API, or use the file cached by tools/setup.
    url=https://api.climateclock.world/v2/portable_m4/clock.json
    curl -s -o "$drive"/clock.json --connect-timeout 2 $url || \
        cp cache/clock.json "$drive"/clock.json

    # Check for other languages and fetch them too.
    langs=$(python3 -c 'import json, sys; print(" ".join(json.load(sys.stdin)["data"]["config"]["langs"]))' < "$drive"/clock.json)
    for lang in $langs; do
      echo "Installing factory copy of clock.$lang.json..."
      url=https://api.climateclock.world/v2/portable_m4/clock.$lang.json
      curl -s -o "$drive"/clock.$lang.json --connect-timeout 2 $url
    done
fi

sync

# Unmount the drive to prevent corruption of the flash filesystem.
if [[ $factory && ! $CCLOCK_SIMULATOR_MODE ]]; then
    [ -f /usr/bin/hdiutil ] && hdiutil eject $drive
    [ -e $drive ] && [[ $(command -v umount) ]] && umount $drive
fi

echo
echo 'Software installed!'
