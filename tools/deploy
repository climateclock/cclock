#!/bin/bash -e

# NOTE: Only one specific v0 should ever make it out into the real world.
# All subsequent versions are modifications on top of v0, so v0 must be
# stable or it will change the interpretation of all other versions.
#
# TODO: This deployment script should deploy only a git-tagged v0 in
# /Volumes/CIRCUITPY, then deploy the current version exactly as it would
# be installed by the software update mechanism.

cd $(dirname "$0")
cd ..

debug_memory=no
if [ "$1" = '-d' ]; then
  debug_memory=yes
  shift
fi
module="$1"
module=${module%.py}
target=/Volumes/CIRCUITPY
unalias -a

echo 'Checking syntax...'
python3 <<EOF || exit 1
import os
import sys
sys.path.append('stubs')
from app import run
for name in os.listdir():
    if name.endswith('.py'):
        compile(open(name).read(), name, 'exec')
EOF

if [ ! -d "$target" ]; then
    echo -n "Waiting for drive to appear at $target.."
    while ! [ -d "$target" ]; do
        echo -n '.'
        sleep 0.05
    done
    sleep 0.5  # wait for drive to become writable after boot
fi

if [ ! -d "$target" ]; then
    echo "No drive found at $target.  Is a CircuitPython device connected?"
    exit 1
fi

if ! touch "$target/test"; then
    echo "$target appears to be in read-only mode."
    exit 1
fi

echo
echo "This will wipe the attached MatrixPortal device and perform a factory"
echo "reset, with the current Climate Clock codebase deployed as v0."
echo
echo -n "Proceed? "
read confirm
echo

if ! [[ $confirm = y* ]]; then
    exit 1
fi

echo 'Wiping the flash disk...'
rm -rf $target/*

echo 'Installing program modules...'
rm -f *.mpy
for file in *.py; do
    if [ $file = boot.py ] || [ $file = main.py ]; then
        cp $file $target
    else
        name=${file%.py}
        env/bin/mpy-cross "$name.py"
        cp "$name.mpy" $target/
    fi
done

rm -f *.mpy /tmp/imports.py /tmp/start.py /tmp/start.mpy

echo 'Scanning for imports...'

if [ $debug_memory = 'yes' ]; then
    echo 'import time; time.sleep(2)' >>/tmp/imports.py
fi
cat <<EOF >>/tmp/imports.py
import time
import gc
now = str(time.monotonic_ns()//1000000)
print(f'[{now[:-3]}.{now[-3:]}: {gc.mem_free()} free] Starting imports')
EOF
if [ $debug_memory = 'yes' ]; then
    echo 'import micropython; micropython.mem_info(1)' >>/tmp/imports.py
fi
for module in $(tools/sort_imports start); do
    if [ $debug_memory = 'yes' ]; then
        cat <<EOF >>/tmp/imports.py
gc.collect(); before = gc.mem_free()
import $module
gc.collect(); after = gc.mem_free()
print(f'import $module,{before - after}')
micropython.mem_info(1); print()
EOF
    else
        echo "import $module" >>/tmp/imports.py
    fi
done
cat <<EOF >>/tmp/imports.py
gc.collect()
now = str(time.monotonic_ns()//1000000)
print(f'[{now[:-3]}.{now[-3:]}: {gc.mem_free()} free] Finished imports')
EOF
if [ $debug_memory = 'yes' ]; then
    echo 'utils.debug = True; micropython.mem_info(1); print()' >>/tmp/imports.py
fi

sed -e /#IMPORTS#/r/tmp/imports.py <start.py >/tmp/start.py
env/bin/mpy-cross /tmp/start.py
cp /tmp/start.mpy $target/

rm -f *.mpy /tmp/imports.py /tmp/start.py /tmp/start.mpy

echo 'Installing fonts...'
cp *.mcf $target/

echo 'Installing initial copy of clock.json...'
mkdir $target/cache
curl -s -o $target/cache/clock.json --connect-timeout 2 https://api.climateclock.world/v1/clock || cp cache/clock.json $target/cache/clock.json

version=v0.$(git describe --always --match='' --dirty)
mkdir $target/$version
touch $target/$version/@VALID
touch $target/$version/@ENABLED
sync
echo 'All done!'
