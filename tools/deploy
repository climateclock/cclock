#!/bin/bash -e

# NOTE: Only one specific v0 should ever make it out into the real world.
# All subsequent versions are modifications on top of v0, so v0 must be
# stable or it will change the interpretation of all other versions.
#
# TODO: This deployment script should deploy only a git-tagged v0 in
# /Volumes/CIRCUITPY, then deploy the current version exactly as it would
# be installed by the software update mechanism.

cd $(dirname "$0")
source functions.sh
cd ..

while [[ $1 = -* ]]; do
    [[ $1 = -d ]] && export CCLOCK_MEMORY_DEBUGGING=1
    [[ $1 = -h || $1 = --help ]] && help=yes
    [[ $1 = -s ]] && export CCLOCK_SIMULATOR_MODE=1
    [[ $1 = -w ]] && wipe=yes
    shift
done
vname="$1"
[[ $wipe ]] && vname=v0

if [[ $help || ! $vname ]]; then
    cat <<EOF && exit 1
Usage: $0 [-d] [-s] [-w] <vname>

Deploys the code in the current directory to the attached CircuitPython device.
Also installs data/clock.json if it isn't present, fetching an up-to-date copy
from the API if possible.

<vname> should be a version name in the form v1, v2, etc.

-d enables memory debugging: memory layout is dumped with every log message.

-s deploys to a simulated filesystem at /tmp/cclock instead of a real device.

-w wipes the device and deploys v0, leaving the device in a factory reset state.

EOF
fi

echo 'Checking syntax...'
python3 <<EOF || exit 1
import os
import sys
sys.path.append('simulator')
from app import run
for name in os.listdir():
    if name.endswith('.py'):
        compile(open(name).read(), name, 'exec')
EOF

drive=/Volumes/CIRCUITPY
[[ $CCLOCK_SIMULATOR_MODE ]] && mkdir -p /tmp/cclock && drive=/tmp/cclock

if [[ ! -d $drive ]]; then
    echo -n "Waiting for drive to appear at $drive.."
    while [[ ! -d $drive ]]; do
        echo -n '.'
        sleep 0.05
    done
    sleep 0.5  # wait for drive to become writable after boot
    echo
fi

if [[ ! -d $drive ]]; then
    echo "No drive found at $drive.  Is a CircuitPython device connected?"
    exit 1
fi

if ! touch "$drive/test"; then
    echo "$drive appears to be in read-only mode."
    exit 1
fi
rm -f "$drive/test"

if [[ $wipe ]]; then
    echo "Wiping $drive..."
    rm -rf $drive/*
fi

# To figure out the version hash, we have to build the pack.
pack_dir=/tmp/pack.$$
mkdir -p $pack_dir
cp *.py *.mcf $pack_dir
eval $(tools/pack $pack_dir $vname 2>/dev/null)
[[ $CCLOCK_KEEP_TEMP_FILES ]] || rm -rf $pack_dir $pack_filename
version=$vname.$pack_hash
target=$drive/$version

if [[ ! -f "$drive"/boot.py || ! -f "$drive"/main.py ]]; then
    echo "Installing bootstrap code to $drive..."
    cp boot.py main.py "$drive"
fi

echo "Installing $vname modules at $target..."
deploy_to "$target"

if [[ ! -f "$drive"/data/clock.json ]]; then
    echo 'Installing initial copy of clock.json...'
    mkdir -p "$drive"/data
    # Try to fetch it from the API, or use the file cached by tools/setup.
    url=https://api.climateclock.world/v1/clock
    curl -s -o "$drive"/data/clock.json --connect-timeout 2 $url || \
        cp cache/clock.json "$drive"/data/clock.json
fi

touch "$target"/@VALID
touch "$target"/@ENABLED
echo
sync
echo 'All done!'
