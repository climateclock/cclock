#!/bin/bash -e

cd $(dirname "$0")
source functions.sh
cd ..

while [[ $1 = -* ]]; do
    [[ $1 = -h || $1 = --help ]] && help=yes
    [[ $1 = -s ]] && export CCLOCK_SIMULATOR_MODE=1
    [[ $1 = -u ]] && shift && url=$1
    shift
done

version="$1"
base="$2"

vname=${version%%@*}
vcommit=${version##*@}
bname=${base%%@*}
bcommit=${base##*@}

version_files_dir=/tmp/version-files.$$
version_pack_dir=/tmp/version-pack.$$
base_files_dir=/tmp/base-files.$$
base_pack_dir=/tmp/base-pack.$$

if [[ $help || ! $vname = v* ]]; then
    cat <<EOF && exit 1
Usage: $0 [-u <base-url>] <version> [<base>]

<version> and <base> should be version names in the form v1, v2, etc.

If only <version> is specified, builds a pack file named <version>.<hash>.pk
containing all the files at the git tag named <version>.

If <version> and <base> are specified, builds a pack file named
<version>-<base>.<hash>.pk containing just the files that changed between
the tag named <base> and the tag named <version>.

To force the pack to be built using the files at a different git commit,
you can add a @<commit> suffix after <version> or <base>.  You can also use
the suffix "@." to build a fictitious version from the current working tree.

-s produces a pack file that can work in the simulator, by suppressing the
usual compilation of Python files into .mpy files.

-u <base-url> prints out a nicely formatted JSON entry for you to paste into
packs.json when you publish the pack file.  <base-url> should be the URL to
the directory where the pack file will go; for example, if you are putting
pack files at https://example.com/path/whatever.pk, <base-url> should be
"https://example.com/path".

Examples:

    release v2     # builds v2.<hash>.pk, containing v2
    release -s v2  # builds v2.<hash>.pk, containing v2, for the simulator only
    release v2 v1  # builds v2-v1.<hash>.pk, containing a patch from v1 to v2
    release v3@.   # builds v3.<hash>.pk, containing the working tree

EOF
fi

# Make a directory containing the version to release.
mkdir $version_files_dir
if [[ $vcommit = . ]]; then
    echo "Releasing working directory files as $vname."
    build . $version_pack_dir
else
    git archive $vcommit | tar -x -C $version_files_dir
    echo "Releasing $vname at:"
    git log -n 1 --oneline $vcommit
    build $version_files_dir $version_pack_dir
fi

if [[ $base ]]; then
    # Make a directory containing the base version.
    mkdir $base_files_dir
    git archive $bcommit | tar -x -C $base_files_dir
    echo "Patching against base $bname at:"
    git log -n 1 --oneline $bcommit
    build $base_files_dir $base_pack_dir

    # Use tools/pack to find the pack hash for the base version.
    eval $(tools/pack -n $bname $base_pack_dir)
    echo $bname.$pack_hash > $version_pack_dir/@PATH
    echo "Setting @PATH to: $bname.$pack_hash"

    # Omit all the unchanged files from the patch pack.
    for file in $(cd $version_pack_dir; echo *); do
        if diff -q $base_pack_dir/$file $version_pack_dir/$file >/dev/null 2>&1; then
            rm $version_pack_dir/$file
        fi
    done
    pack_name=$vname-${bname}
else
    pack_name=$vname
fi

# Now build the pack.
echo
eval $(tools/pack $pack_name $version_pack_dir)
echo Pack file: $pack_filename

[[ $url ]] && cat <<EOF

    "$pack_name": {
      "url": "$url/$pack_filename",
      "hash": "$pack_hash",
      "published": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
      "enabled": true
    }

EOF

[[ $CCLOCK_KEEP_TEMP_FILES ]] || rm -rf "$version_files_dir" "$version_pack_dir" "$base_files_dir" "$base_pack_dir"
