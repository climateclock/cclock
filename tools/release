#!/bin/bash -e

cd $(dirname "$0")
source functions.sh
cd ..

while [[ $1 = -* ]]; do
    [[ $1 = -h || $1 = --help ]] && help=yes
    [[ $1 = -s ]] && export CCLOCK_SIMULATOR_MODE=1
    [[ $1 = -u ]] && shift && url=$1
    shift
done
vname="$1"
commit="$2"
parent="$3"
parent_commit="$4"
parent_commit=${parent_commit:-$parent}
release_files_dir=/tmp/release-files.$$
release_pack_dir=/tmp/release-pack.$$
parent_files_dir=/tmp/parent-files.$$
parent_pack_dir=/tmp/parent-pack.$$

if [[ $help || ! $vname = v* ]]; then
    cat <<EOF && exit 1
Usage: $0 [-u <base-url>] <vname> [<commit> [<parent> [<parent-commit>]]]

<vname> and <parent> should be version names in the form v1, v2, etc.
<commit> and <parent-commit> should be git commit hashes or tags.

If only <vname> and <commit> are specified, builds a pack file named
<vname>.<hash>.pk containing the files at <commit>.

If <parent> and <parent-commit> are also specified, builds a pack file
named <vname>-<parent>.<hash>.pk containing only the files that changed
between <parent-commit> and <commit>.

<commit> can be omitted or given as "HEAD" to use the files in the working
directory instead of the files at a particular commit.  <parent-commit>
can be omitted if it is the same as <parent>.

-s produces a pack file that can work in the simulator, by
suppressing the usual compilation of Python files into .mpy files.

-u <base-url> prints out a nicely formatted JSON entry for you to paste
into packs.json when you publish the pack file.  <base-url> should be
the URL to the directory where the pack file will go; for example, if
you are putting pack files at https://example.com/path/whatever.pk,
<base-url> should be "https://example.com/path".

EOF
fi

# Make a directory containing the version to release.
mkdir $release_files_dir
if [[ $commit && $commit != HEAD ]]; then
    git archive $commit | tar -x -C $release_files_dir
    echo "Releasing $vname at:"
    git log -n 1 --oneline $commit
    build $release_files_dir $release_pack_dir
else
    echo "Releasing working directory files as $vname."
    build . $release_pack_dir
fi

if [[ $parent_commit ]]; then
    # Make a directory containing the parent version.
    mkdir $parent_files_dir
    git archive $parent_commit | tar -x -C $parent_files_dir
    echo "Patching against parent $parent at:"
    git log -n 1 --oneline $parent_commit
    build $parent_files_dir $parent_pack_dir

    # Use tools/pack to find the pack hash for the parent version.
    eval $(tools/pack -n $parent $parent_pack_dir)
    echo $parent.$pack_hash > $release_pack_dir/@PATH
    echo "Setting @PATH to: $parent.$pack_hash"

    # Omit all the unchanged files from the patch pack.
    for file in $(cd $release_pack_dir; echo *); do
        if diff -q $parent_pack_dir/$file $release_pack_dir/$file >/dev/null 2>&1; then
            rm $release_pack_dir/$file
        fi
    done
    pack_name=$vname-${parent}
else
    pack_name=$vname
fi

# Now build the pack.
echo
eval $(tools/pack $pack_name $release_pack_dir)
echo Pack file: $pack_filename

[[ $url ]] && cat <<EOF

    "$pack_name": {
      "url": "$url/$pack_filename",
      "hash": "$pack_hash",
      "published": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
      "enabled": true
    }

EOF

[[ $CCLOCK_KEEP_TEMP_FILES ]] || rm -rf "$release_files_dir" "$release_pack_dir" "$parent_files_dir" "$parent_pack_dir"
