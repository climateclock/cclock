#!/bin/bash -e

cd $(dirname "$0")
source functions.sh
cd ..

while [[ $1 = -* ]]; do
    [[ $1 = -h || $1 = --help ]] && help=yes
    [[ $1 = -s ]] && export CCLOCK_SIMULATOR_MODE=1
    [[ $1 = -u ]] && shift && url=$1
    shift
done
vname="$1"
commit="$2"
parent="$3"
parent_commit="$4"
pack_dir=/tmp/pack.$$
parent_dir=/tmp/parent.$$

if [[ $help || ! $commit || ! $vname = v* ]]; then
    cat <<EOF && exit 1
Usage: $0 [-u <url>] <vname> <commit> [<parent> <parent-commit>]

<vname> and <parent> should be version names in the form v1, v2, etc.
<commit> and <parent-commit> should be git commit hashes or tags.

If only <vname> and <commit> are specified, builds a pack file
named <vname>.<hash>.pk file containing the files at <commit>.

If <parent> and <parent-commit> are also specified, builds a pack
file named <vname>-<parent>.<hash>.pk containing only the files
that changed between <parent-commit> and <commit>.

-s produces a pack file that can work in the simulator, by
suppressing the usual compilation of Python files into .mpy files.

-u <url> prints out a nicely formatted JSON entry for you to paste
into packs.json when you publish the pack file.

EOF
fi

if ! git diff --quiet; then
    echo "Working tree is dirty.  Please commit or stash before releasing."
    exit 1
fi

current_commit=$(git rev-parse --abbrev-ref HEAD)

# Make a directory containing the version to release.
git checkout -q $commit
echo "Releasing $vname at:"
git log -n 1 --oneline
deploy_to $pack_dir

if [[ $parent_commit ]]; then
    # Make a directory containing the parent version.
    git checkout -q $parent_commit
    echo "Patching against parent $parent at:"
    git log -n 1 --oneline
    deploy_to $parent_dir

    # To find the hash of the parent version, build the parent pack.
    eval $(tools/pack $parent_dir $parent_dir/pack 2>/dev/null)
    echo v$parent.$hash > $pack_dir/@PATH
    echo "Setting @PATH to: v$parent.$hash"

    # Omit all the unchanged files from the patch pack.
    for file in $(cd $pack_dir; echo *); do
        if diff -q $parent_dir/$file $pack_dir/$file 2>/dev/null; then
            rm $pack_dir/$file
        fi
    done
    pack_name=$vname-${parent#v}
else
    pack_name=$vname
fi

# Now build the pack.
echo
eval $(tools/pack $pack_dir $pack_name)
echo Pack file: $filename

[[ $url ]] && cat <<EOF

    "$pack_name": {
      "url": "$url/$filename",
      "hash": "$hash",
      "published": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
      "enabled": true
    }

EOF

# Restore the working tree.
git checkout -q $current_commit

rm -rf "$pack_dir" "$parent_dir"
