#!/usr/bin/env python3

from hashlib import md5
import os
import sys
import tempfile

def pack(source_dir, pack_name, pack_file):
    current_dir = os.getcwd()
    os.chdir(source_dir)
    try:
        file_list = sum((
            [os.path.join(path.lstrip('./'), file) for file in files]
            for path, dirs, files in os.walk('.')
        ), [])
        file_list.sort()
        digest = md5()
        for path in file_list:
            digest.update(to_bytes(path))
            digest.update(open(path, 'rb').read())
        pack_hash = digest.hexdigest()

        write_magic(pack_file, 1)
        write_block(pack_file, 'pn', to_bytes(pack_name))
        write_block(pack_file, 'ph', to_bytes(pack_hash))
        for path in file_list:
            write_block(pack_file, 'fn', path)
            with open(path, 'rb') as source_file:
                content = source_file.read(65535)
                if len(content) == 0:
                    break
                write_block(pack_file, 'fc', content)
        write_block(pack_file, 'pe', b'')
        return pack_hash
    finally:
        os.chdir(current_dir)

def to_bytes(arg):
    if isinstance(arg, bytes):
        return arg
    if isinstance(arg, str):
        return bytes(arg, 'ascii')
    raise TypeError('Not a str or bytes object: ' + repr(arg))

def to_short(arg):
    assert arg <= 0xffff
    return bytes([arg >> 8, arg & 0xff])

def write_magic(file, version):
    file.write(b'pk')
    file.write(to_short(version))

def write_block(file, block_type, content):
    file.write(to_bytes(block_type))
    file.write(to_short(len(content)))
    file.write(to_bytes(content))

def main(pack_name, source_dir, dry_run=False):
    fd, temp_path = tempfile.mkstemp()
    with os.fdopen(fd, 'wb') as file:
        pack_hash = pack(source_dir, pack_name, file)
    pack_filename = f'{pack_name}.{pack_hash}.pk'
    print(f'pack_hash={pack_hash}')  # output for use by bash scripts
    if dry_run:
        os.remove(temp_path)
    else:
        os.rename(temp_path, pack_filename)
        sys.stderr.write(f'Wrote {os.path.getsize(pack_filename)} bytes.\n')
        print(f'pack_filename={pack_filename}')  # output for use by scripts

if __name__ == '__main__':
    args = sys.argv[1:]

    dry_run = False
    if args[0] == '-n':
        args.pop(0)
        dry_run = True

    main(*args, dry_run=dry_run)
